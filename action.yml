name: "Smart Contract PR Reviewer"
description: "Automatically analyzes Solidity PRs and posts LLM-based audit comments."
author: "Arbet"
inputs:
  backend_url:
    description: "The URL of your Python backend that performs the review"
    required: true
runs:
  using: "composite"
  steps:
    # Step 1: Check out the code, fetching the entire history to allow diffing against main
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Important for fetching history to diff against the base branch

    # Step 2: Set up the Python environment
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    # Step 3: Generate a diff file to be included in the payload
    - name: Generate diff file
      run: |
        echo "📝 Generating diff against origin/main..."
        # Fetch the main branch to ensure the base of the diff is up-to-date
        git fetch origin main
        git diff origin/main...HEAD > diff.patch
        echo "✅ Diff generated:"
        cat diff.patch
      shell: bash

    # Step 4: Prepare the payload with 'before' and 'after' code states
    - name: Prepare payload with before and after states
      id: prepare_payload
      run: python ${{ github.action_path }}/scripts/prepare_payload.py
      shell: bash

    # Step 5: Call the backend API, but only if there were Solidity changes
    - name: Call backend API
      id: call_backend
      if: steps.prepare_payload.outputs.has_changes == 'true'
      run: |
        echo "📡 Sending payload to backend API at ${{ inputs.backend_url }}..."
        
        # Debug: Show payload size
        echo "📦 Payload size: $(wc -c < payload.json) bytes"
        
        RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "${{ inputs.backend_url }}/analyze" \
          -H "Content-Type: application/json" \
          --data-binary @payload.json)
        
        HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
        BODY=$(echo "$RESPONSE" | sed '$d')

        echo "✅ Response received from backend (HTTP Status: $HTTP_CODE):"
        
        # Only try to parse as JSON if status is 200
        if [ "$HTTP_CODE" -eq 200 ]; then
          echo "$BODY" | jq '.'
          REVIEW_COMMENT=$(echo "$BODY" | jq -r '.review_comment')
        else
          echo "❌ Backend API error (HTTP Status: $HTTP_CODE)"
          echo "Response body:"
          echo "$BODY"
          echo "::error::Backend API returned status $HTTP_CODE"
          exit 1
        fi

        echo "review_comment<<EOF" >> $GITHUB_OUTPUT
        echo "$REVIEW_COMMENT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
      shell: bash

    # Step 6: Post the review comment on the PR, but only if a review was generated
    - name: Comment on PR
      if: steps.prepare_payload.outputs.has_changes == 'true'
      uses: peter-evans/create-or-update-comment@v4
      with:
        token: ${{ github.token }}
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          ## 🤖 Automated Smart Contract PR Review
          
          ${{ steps.call_backend.outputs.review_comment }}

    # Step 7: Final confirmation message
    - name: Finish workflow
      run: |
        echo "🎉 Workflow completed successfully"
      shell: bash
